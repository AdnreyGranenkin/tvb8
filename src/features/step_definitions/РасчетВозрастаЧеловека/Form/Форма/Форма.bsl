//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьДатаРождения(Парам01)","ЕстьДатаРождения","Допустим есть дата рождения ""15/04/1980""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьТекущаяДата(Парам01)","ЕстьТекущаяДата","И есть текущая дата ""01/10/2016""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВозврастЧеловекаРавен(Парам01)","ВозврастЧеловекаРавен","Тогда возвраст человека равен 36");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим есть дата рождения "15/04/1980"
//@ЕстьДатаРождения(Парам01)
Процедура ЕстьДатаРождения(ДатаРождения) Экспорт
	Если ТипЗнч(ДатаРождения) <> Тип("Дата") Тогда
		ВызватьИсключение "не верная дата рождения";
	КонецЕсли;
	Контекст.Вставить("ДатаРождения", ДатаРождения);
КонецПроцедуры

&НаКлиенте
//И есть текущая дата "01/10/2016"
//@ЕстьТекущаяДата(Парам01)
Процедура ЕстьТекущаяДата(ПарамТекущаяДата) Экспорт
	Если ТипЗнч(ПарамТекущаяДата) <> Тип("Дата") Тогда
		ВызватьИсключение "не верная текущая дата";
	КонецЕсли;
	Контекст.Вставить("ТекущаяДата", ПарамТекущаяДата);
КонецПроцедуры

&НаКлиенте
//Тогда возвраст человека равен 36
//@ВозврастЧеловекаРавен(Парам01)
Процедура ВозврастЧеловекаРавен(ВозрастПроверка) Экспорт
	
	Если ТипЗнч(ВозрастПроверка) <> Тип("Число") Тогда
		ВызватьИсключение "Тип результата должен быть числом";
	КонецЕсли;
	
	ТекДата = Контекст.ТекущаяДата;
	
	ДатаРождения = Контекст.ДатаРождения;
	
	Возраст = ОбщегоНазначения.ПолучитьВозраст(ДатаРождения, ТекДата);	
	Если Возраст <> ВозрастПроверка Тогда
		ВызватьИсключение "Требуемый результат (" + ВозрастПроверка + ") не равен полученному (" + Возраст + ")";
	КонецЕсли;
	

КонецПроцедуры

//окончание текста модуля